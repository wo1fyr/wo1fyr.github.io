<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP中的自增</title>
      <link href="/2025/05/18/%E8%87%AA%E5%A2%9E%E5%8E%9F%E7%90%86/"/>
      <url>/2025/05/18/%E8%87%AA%E5%A2%9E%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h1><p>php是弱语言，单字符型变量自增能得到下一个字符，且单个或多个下划线**_**也可以作为变量名，自增操作可以通过使用 <strong>++</strong> 符号来完成</p><p><img src="/img%5Czizeng1.png"></p><p>这里我们没给$_赋值，它会给自己赋值NULL&#x3D;0，这时输出的就是1</p><p><img src="/img%5Czizeng2.png"></p><p>当我们获得A时，就可以通过自增获得所有大写字母</p><p>那我们怎么获得我们的第一个字母呢？</p><p>数组转字符串后是天然的字符串 Array，我们切片取第一个字符，就得到A</p><p><img src="/img%5Czizeng3.png"></p><p><img src="/img%5Czizeng4.png"></p><p><strong>$++</strong>:此时是**$<strong><strong>，下一步的值才是</strong>$</strong>+1**</p><p><strong>++$_</strong>:此时是**$__+1**</p><p><img src="/img%5Czizeng5.png"></p><p>这个自增还可以继续增加，如果超过26个了呢？</p><p><img src="/img%5Czizeng6.png"></p><p>可以看到，A-Z之后就是AA-AZ，然后BA-BZ，至于有没有极限，我还没有深究</p><p>此时我们可以通过构造执行传参命令的payload</p><p><img src="/img%5Czizeng7.png"></p><p>assert($_POST[_])</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MD5碰撞-fastcoll使用</title>
      <link href="/2025/05/18/fastcoll%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/05/18/fastcoll%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="fastcoll"><a href="#fastcoll" class="headerlink" title="fastcoll"></a>fastcoll</h1><p><em>我用的不知道是哪个项目里面的，我就一个exe文件，可能是以前的吧(猫爹无奈)，也可以就用我的那个独子，也可以去网上找找新版本的更稳定的生成器</em></p><p>用于构造两个原值不同，但是MD5值相同的工具。在CTF里面如果给你两个String类型变量(用不了数组绕过)，还要你MD5强相等(&#x3D;&#x3D;&#x3D;)，就得用这个工具来构造了。这就叫MD5碰撞，分为有前缀和无前缀，在工具的同目录下应该有一个txt，里面写的是前缀，无前缀txt里面就为空。</p><p><a href="https://pan.baidu.com/s/1elcc1H6geZLf0Yul5d56NA?pwd=4dgb">下载</a></p><p>用法：</p><ol><li><p>直接把txt拖到exe上，会给你生成两个文件，还会弹出来个cmd窗口(猫爹严肃，演示的时候CMD卡死了，关也关不掉，最后任务管理器给他强制关的)</p><p><img src="/img%5Cfastcoll.png"></p><p>最后输出的两个文件里面有不可编码字符，最好URL编码一下</p><p>脚本如下(记得改路径！)：</p><p><code>&lt;?php</code><br><code>function readmyfile($path)&#123;  $fh = fopen($path, &quot;rb&quot;);  $data = fread($fh, filesize($path));  fclose($fh);  return $data; &#125; $a = urlencode(readmyfile(&quot;C:/fastcoll/0_msg1.txt&quot;));</code><br><code>$b = urlencode(readmyfile(&quot;C:/fastcoll/0_msg1.txt&quot;)); if(md5((string)urldecode($a))===md5((string)urldecode($b)))&#123; echo $a; &#125; if(urldecode($a)!=urldecode($b))&#123; echo $b;</code><br><code>&#125;</code><br><code>?&gt;</code></p></li><li><p>也可以指定输出文件名</p><p>.&#x2F;fastcoll.exe -p 前缀文件.txt -o 输出文件1.txt 输出文件2.txt</p></li></ol><p>感觉用着应该略够，可能后面我会把它换成新的，到时候再更新，有兴趣的可以去看看现在新的fastcoll，感觉挺多的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NSSRound#28 Team</title>
      <link href="/2025/05/18/NSSCTF_28/"/>
      <url>/2025/05/18/NSSCTF_28/</url>
      
        <content type="html"><![CDATA[<h1 id="ez-php"><a href="#ez-php" class="headerlink" title="ez_php"></a>ez_php</h1><p>进来就是几个绕过执行文件包含到<strong>level2.php</strong></p><p><img src="/img%5Cez_php1.png"></p><p>传入POST变量a，b，GET变量password，检测password是不是数字，又检测它是不是123456，因为是弱类型，直接传<strong>password&#x3D;123456a</strong>即可。最后的file用伪协议即可</p><p>对于下面的有两种方法：</p><ul><li><p>数组绕过</p><p>a[]&#x3D;1&amp;b[]&#x3D;2</p><p><img src="/img%5Cez_php2.png"></p></li><li><p>MD5碰撞</p><p><img src="/img%5Cez_php3.png"></p><p>这里我是直接用yakit读我的文件，也可以用fastcoll生成后自己将文件里面的拿出来，方法在我的博客里面。</p></li></ul><p>这里进到第二层。其实这里有一个非预期，可以直接从这里读到根目录的flag</p><p><img src="/img%5Cez_php4.png"></p><p>base64解码后得到flag。</p><p>预期解应该是进到<strong>level2.php</strong>里面，然后绕过waf执行rce。</p><p><img src="/img%5Cez_php5.png"></p><p>这里过滤了大小写字母、^、<del>等符号，一般来说无字母数字RCE有三种方法，异或(^)，取反(</del>)，自增($)，这里用到自增</p><p>payload：</p><p><img src="/img%5Cez_php6.png"></p><p>长度118，小于120，传入post变量的时候记得url编码</p><p><img src="/img%5Cez_php7.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记录在NSSCTF刷题的过程，康复训练了属于是。。。</title>
      <link href="/2025/03/20/NSSCTF/"/>
      <url>/2025/03/20/NSSCTF/</url>
      
        <content type="html"><![CDATA[<h2 id="GKCTF-2020-cve版签到"><a href="#GKCTF-2020-cve版签到" class="headerlink" title="[GKCTF 2020]cve版签到"></a>[GKCTF 2020]cve版签到</h2><p>首先看到有一个链接，下面有一个提示</p><p>You just view *.ctfhub.com</p><p>意思就是你只能访问的链接后缀得是.ctfhub.com</p><p>我们点进链接</p><p><img src="/img/cve%E7%89%88%E7%AD%BE%E5%88%B0_1.png"></p><p>第一眼没有发现很明显的提示信息，但是我们看到url处有传参名url。</p><p>查看源代码和请求体信息</p><p><img src="/img/cve%E7%89%88%E7%AD%BE%E5%88%B0_2.png"></p><p>发现hint，提示我们访问本地，联想到刚刚发现的url参数，意思就是让我们访问<a href="http://127.0.0.1/%EF%BC%8C%E4%BD%86%E6%98%AF%E5%8F%88%E8%A6%81%E6%88%91%E4%BB%AC%E4%BB%A5.ctfhub.com%E7%BB%93%E5%B0%BE%EF%BC%8C%E8%BF%99%E9%87%8C%E5%8F%AF%E4%BB%A5%E6%83%B3%E5%88%B0%00%E6%88%AA%E6%96%AD%E3%80%82">http://127.0.0.1/，但是又要我们以.ctfhub.com结尾，这里可以想到%00截断。</a></p><p><strong>截断是操作系统层的漏洞，由于操作系统是C语言或汇编语言编写的，这两种语言在定义字符串时，都是以\0（即0x00）作为字符串的结尾。操作系统在识别字符串时，当读取到\0字符时，就认为读取到了一个字符串的结束符号。因此，我们可以通过修改数据包，插入\0字符的方式，达到字符串截断的目的。</strong></p><p>可以构造payload：&#x2F;?url&#x3D;<a href="http://127.0.0.1%00.ctfhub.com">http://127.0.0.1%00.ctfhub.com</a></p><p><img src="/img/cve%E7%89%88%E7%AD%BE%E5%88%B0_3.png"></p><p>tips告诉我们要以123结尾，把1改为123即可</p><p><img src="/img/cve%E7%89%88%E7%AD%BE%E5%88%B0_4.png"></p><h2 id="羊城杯-2020-easycon"><a href="#羊城杯-2020-easycon" class="headerlink" title="[羊城杯 2020]easycon"></a>[羊城杯 2020]easycon</h2><p>打开网页，啥有用的信息也没找到，一般来说就是看网页，看源代码，请求体响应体，cookie等等信息，都找不到就扫，这题扫出来两个状态码为200的url</p><p><img src="/img/easycon_1.png"></p><p><strong>这两个url走哪个后面做题流程都是一样的，我以第一个url做的，唯一的区别就是带login的图片显示不正常，不过不影响做题。</strong></p><p>加载网页后会有一个弹窗，显示eval post cmd</p><p><img src="/img/easycon_2.png"></p><p>大致推测出是有eval危险函数可以执行任意命令，post传参，参数名是cmd</p><p>试一下，成了。可以执行</p><p><img src="/img/easycon_3.png"></p><p>读取敏感文件</p><p><img src="/img/easycon_4.png"></p><p>丢进赛博厨子</p><p><img src="/img/easycon_5.png"></p><p>然后出flag</p><h2 id="NISACTF-2022-babyupload"><a href="#NISACTF-2022-babyupload" class="headerlink" title="[NISACTF 2022]babyupload"></a>[NISACTF 2022]babyupload</h2><p>打开网页，第一眼是文件上传，不过要长一个心眼，先从简单的情况入手，看源代码，请求体响应体，cookie等等信息。</p><p>这题在源代码发现了&#x2F;source路由，下载可以得到源码</p><p><img src="/img/babyupload_1.png"></p><p>再就是代码审计，初始页面的文件上传。不能上传文件名有.的文件，即文件名不能有后缀</p><p><img src="/img/babyupload_2.png"></p><p>如果有.就报错”Bad filename!”。如果正确，则保存到数据库，存的时候是uploads&#x2F;文件名，读取的时候是file&#x2F;uid。</p><p>利用&#x2F;file&#x2F;uid可以读取我们上传的文件，在这里用到了一个函数os.path.join，这个函数存在绝对路径拼接漏洞。</p><p><img src="/img/babyupload_3.png"></p><p><strong>os.path.join函数用于将多个文件路径连接成一个组合的路径。第一个函数通常包含了基础路径，而之后的每个参数被当作组件拼接到基础路径之后。这个函数有一个特性，如果拼接的某个路径以 &#x2F; 开头，那么包括基础路径在内的所有前缀路径都将被删除，该路径将视为绝对路径</strong></p><p>在本题中，如果你后面传的文件名为&#x2F;flag，那拼接的时候会将前面的各级路径全部删掉，读取的就是根目录的flag文件。</p><p>所以我们可以做到以下操作：</p><p>打开burp，随便传一个文件，抓包拦截住，将文件名改成&#x2F;flag，然后发送。</p><p><img src="/img/babyupload_4.png"></p><p>得到flag</p><p><img src="/img/babyupload_5.png"></p><h2 id="MoeCTF-2022-baby-file"><a href="#MoeCTF-2022-baby-file" class="headerlink" title="[MoeCTF 2022]baby_file"></a>[MoeCTF 2022]baby_file</h2><p>打开网页是一串php代码，文件包含。</p><p>看到一句话，有秘密？看到在cookie处有一个flagisiin参数，对应的是&#x2F;f14g.php</p><p><img src="/img/baby_file_1.png"></p><p>但是404，别的地方也没什么有用信息.</p><p><img src="/img/baby_file_2.png"></p><p>扫描得到一个flag.php</p><p><img src="/img/baby_file_3.png"></p><p>直接用&#x2F;?file&#x3D;flag.php会报错，这里用伪协议读取</p><p><strong>&#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</strong></p><p>得到文件内容</p><p><img src="/img/baby_file_4.png"></p><p>丢进赛博厨子，得到flag</p><p><img src="/img/baby_file_5.png"></p><h2 id="GDOUCTF-2023-受不了一点"><a href="#GDOUCTF-2023-受不了一点" class="headerlink" title="[GDOUCTF 2023]受不了一点"></a>[GDOUCTF 2023]受不了一点</h2><p>这题一打开看到挺多代码，但是其实只有三个地方我们需要绕过，因为第三层绕过就出flag</p><p>（NSSCTF平台上的是这样的，原题可能涉及变量覆盖的知识点，感兴趣的可以看看那个）</p><p><img src="/img/%E5%8F%97%E4%B8%8D%E4%BA%86%E4%B8%80%E7%82%B9_1.png"></p><p>以下全部做题过程都是用的hackbar，安装教程参考<a href="">hackbar安装教程</a></p><p>第一层：</p><p><code>if($_POST[&#39;gdou&#39;]!=$_POST[&#39;ctf&#39;] &amp;&amp; md5($a)===md5($b))</code></p><p>只需要数组绕过即可；</p><p>第二层：</p><p><code>if(isset($_COOKIE[&#39;cookie&#39;]))&#123;       if ($_COOKIE[&#39;cookie&#39;]==&#39;j0k3r&#39;)&#123;</code></p><p>用hackbar改Cookie参数为cookie&#x3D;j0k3r即可；</p><p>第三层：</p><p><code>if(isset</code>($_GET[‘aaa’]) &amp;&amp; isset($_GET[‘bbb’])){<code>          </code>$aaa&#x3D;$_GET[‘aaa’];<br>         $bbb&#x3D;$_GET[‘bbb’];<code>          if($aaa==114514 &amp;&amp; $bbb==114514 &amp;&amp; $aaa!=$bbb)&#123;</code></p><p>弱比较，其中一个变量在数字后面加一个字母即可</p><p>payload如下：</p><p><img src="/img/%E5%8F%97%E4%B8%8D%E4%BA%86%E4%B8%80%E7%82%B9_2.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>好好学习，学好了再说别的，好好理财</title>
      <link href="/2025/03/19/hello-world/"/>
      <url>/2025/03/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>记录学习生活</p><p>希望以后也可以成为大佬</p><p><img src="/img/power.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
